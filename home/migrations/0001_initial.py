# Generated by Django 4.2.2 on 2023-07-08 13:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, default='user_img_default.png', upload_to='media', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('password2', models.CharField(default='', max_length=32)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GraphicCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('g_cat_picture', models.ImageField(error_messages={'required': 'Load min 1 Graphic ...'}, upload_to='media', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'g_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LoadVideoForPageCreation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='media')),
            ],
        ),
        migrations.CreateModel(
            name='PictureCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('p_cat_picture', models.ImageField(error_messages={'required': 'Load min 1 Graphic ...'}, upload_to='media', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'p_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.ImageField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='SearchPictures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='UserAddPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(error_messages={'required': 'Title is required'}, max_length=100)),
                ('picture', models.ImageField(error_messages={'required': 'Load min. 1 Picture ...'}, upload_to='media', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('price', models.DecimalField(decimal_places=2, error_messages={'required': 'Price in range 0 to 9999€ is required'}, help_text='Note: Price in EUR ...', max_digits=6, max_length=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999), django.core.validators.DecimalValidator(decimal_places=2, max_digits=6)])),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(default='Category', max_length=100, on_delete=django.db.models.deletion.CASCADE, related_name='picture', to='home.picturecategories')),
                ('tag_field', taggit.managers.TaggableManager(blank=True, help_text='Choose some tags that people can find your Picture ...', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_name', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'picture',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='GraphicUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(error_messages={'required': 'Title is required'}, max_length=100)),
                ('picture', models.ImageField(error_messages={'required': 'Load min 1 Graphic ...'}, upload_to='media', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('price', models.DecimalField(decimal_places=2, error_messages={'required': 'Price in range 0 to 9999€ is required'}, help_text='Note: Price in EUR ...', max_digits=6, max_length=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999), django.core.validators.DecimalValidator(decimal_places=2, max_digits=6)])),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(default='Category', max_length=100, on_delete=django.db.models.deletion.CASCADE, related_name='graphic_category', to='home.graphiccategory')),
                ('g_username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='g_username', to=settings.AUTH_USER_MODEL)),
                ('tag_field', taggit.managers.TaggableManager(help_text='Choose some tags that people can find your Graphic ...', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'graphics_upload',
                'ordering': ['-date'],
            },
        ),
    ]
